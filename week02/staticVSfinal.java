package week02;

/**
 * staticVSfinal
 */
public class staticVSfinal {

    public static void main(String[] args) {

        /*
         * static：静态的
         * 主要用来修饰类的内部结构，例如：属性、方法、代码块、内部类
         * 
         * 修饰属性（静态变量或类变量）：我们创建了类的多个对象，多个对象共享同一个静态变量。
         * 当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，
         * 是修改过了的。
         * 
         * 注意:
         * 
         * 静态变量随着类的加载而加载，会赋默认值。可以通过"类.静态变量"的方式进行调用
         * 静态变量的加载要早于对象的创建。
         * 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。
         * 修饰方法（静态方法、类方法）：随着类的加载而加载，可以通过"类.静态方法"的方式进行调用。
         * 静态方法中，只能调用静态的方法或属性。非静态方法中，
         * 既可以调用非静态的方法或属性，也可以调用静态的方法或属性
         * 
         * 修饰代码块：当 JVM加载类时，就会执行该代码块,只会被执行一次。
         * 
         * static 方法不能被重写
         */

        /*
         * final：最终的
         * 可以用来修饰：类、方法、变量
         * final 标记的变量只能赋一次值(对基本类型来说其值不可变，引用类型其引用不可变，即不能指向其他对象)
         * final 方法不能被子类重写
         * final 类不能被继承，没有子类，final 类中的方法默认是 final 的
         */
        System.out.println("final vs static");
    }
}